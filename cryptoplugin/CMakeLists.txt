cmake_minimum_required(VERSION 2.8.11)

project(cryptopp CXX)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

SET (CMAKE_C_COMPILER             "/usr/bin/clang")
SET (CMAKE_C_FLAGS                "-Wall -std=c99")
SET (CMAKE_C_FLAGS_DEBUG          "-g")
SET (CMAKE_C_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
SET (CMAKE_C_FLAGS_RELEASE        "-O4 -DNDEBUG")
SET (CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g")

SET (CMAKE_CXX_COMPILER             "/usr/bin/clang++")
SET (CMAKE_CXX_FLAGS                "-Wall")
SET (CMAKE_CXX_FLAGS_DEBUG          "-g")
SET (CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
SET (CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

SET (CMAKE_AR      "/usr/bin/llvm-ar")
SET (CMAKE_LINKER  "/usr/bin/llvm-ld")
SET (CMAKE_NM      "/usr/bin/llvm-nm")
SET (CMAKE_OBJDUMP "/usr/bin/llvm-objdump")

add_definitions(-DSTATIC_PLUGIN)

add_library(AESDecryption OBJECT AESDecryption.cpp)
add_library(AESEncryption OBJECT AESEncryption.cpp)
add_library(AESGCMDecryption OBJECT AESGCMDecryption.cpp)
add_library(AESGCMEncryption OBJECT AESGCMEncryption.cpp)
add_library(CryptoFactory OBJECT CryptoFactory.cpp)
add_library(ECDHKeyExchange OBJECT ECDHKeyExchange.cpp)
add_library(ZlibCompression OBJECT ZlibCompression.cpp)
add_library(ZlibDecompression OBJECT ZlibDecompression.cpp)
add_library(dllmain OBJECT dllmain.cpp)
add_library(pluginmgr OBJECT pluginmgr.cpp)
add_library(3way OBJECT 3way.cpp)
add_library(adler32 OBJECT adler32.cpp)
add_library(algebra OBJECT algebra.cpp)
add_library(algparam OBJECT algparam.cpp)
add_library(arc4 OBJECT arc4.cpp)
add_library(asn OBJECT asn.cpp)
add_library(authenc OBJECT authenc.cpp)
add_library(base32 OBJECT base32.cpp)
add_library(base64 OBJECT base64.cpp)
add_library(basecode OBJECT basecode.cpp)
add_library(bench OBJECT bench.cpp)
add_library(bench2 OBJECT bench2.cpp)
add_library(bfinit OBJECT bfinit.cpp)
add_library(blowfish OBJECT blowfish.cpp)
add_library(blumshub OBJECT blumshub.cpp)
add_library(camellia OBJECT camellia.cpp)
add_library(cast OBJECT cast.cpp)
add_library(casts OBJECT casts.cpp)
add_library(cbcmac OBJECT cbcmac.cpp)
add_library(ccm OBJECT ccm.cpp)
add_library(channels OBJECT channels.cpp)
add_library(cmac OBJECT cmac.cpp)
add_library(cpu OBJECT cpu.cpp)
add_library(crc OBJECT crc.cpp)
add_library(cryptlib OBJECT cryptlib.cpp)
add_library(cryptlib_bds OBJECT cryptlib_bds.cpp)
add_library(datatest OBJECT datatest.cpp)
add_library(default OBJECT default.cpp)
add_library(des OBJECT des.cpp)
add_library(dessp OBJECT dessp.cpp)
add_library(dh OBJECT dh.cpp)
add_library(dh2 OBJECT dh2.cpp)
add_library(dll OBJECT dll.cpp)
add_library(dlltest OBJECT dlltest.cpp)
add_library(dsa OBJECT dsa.cpp)
add_library(eax OBJECT eax.cpp)
add_library(ec2n OBJECT ec2n.cpp)
add_library(eccrypto OBJECT eccrypto.cpp)
add_library(ecp OBJECT ecp.cpp)
add_library(elgamal OBJECT elgamal.cpp)
add_library(emsa2 OBJECT emsa2.cpp)
add_library(eprecomp OBJECT eprecomp.cpp)
add_library(esign OBJECT esign.cpp)
add_library(files OBJECT files.cpp)
add_library(filters OBJECT filters.cpp)
add_library(fips140 OBJECT fips140.cpp)
add_library(fipsalgt OBJECT fipsalgt.cpp)
add_library(fipstest OBJECT fipstest.cpp)
add_library(gcm OBJECT gcm.cpp)
add_library(gf256 OBJECT gf256.cpp)
add_library(gf2_32 OBJECT gf2_32.cpp)
add_library(gf2n OBJECT gf2n.cpp)
add_library(gfpcrypt OBJECT gfpcrypt.cpp)
add_library(gost OBJECT gost.cpp)
add_library(gzip OBJECT gzip.cpp)
add_library(hex OBJECT hex.cpp)
add_library(hmac OBJECT hmac.cpp)
add_library(hrtimer OBJECT hrtimer.cpp)
add_library(ida OBJECT ida.cpp)
add_library(idea OBJECT idea.cpp)
add_library(integer OBJECT integer.cpp)
add_library(iterhash OBJECT iterhash.cpp)
add_library(luc OBJECT luc.cpp)
add_library(mars OBJECT mars.cpp)
add_library(marss OBJECT marss.cpp)
add_library(md2 OBJECT md2.cpp)
add_library(md4 OBJECT md4.cpp)
add_library(md5 OBJECT md5.cpp)
add_library(misc OBJECT misc.cpp)
add_library(modes OBJECT modes.cpp)
add_library(mqueue OBJECT mqueue.cpp)
add_library(mqv OBJECT mqv.cpp)
add_library(nbtheory OBJECT nbtheory.cpp)
add_library(network OBJECT network.cpp)
add_library(oaep OBJECT oaep.cpp)
add_library(osrng OBJECT osrng.cpp)
add_library(panama OBJECT panama.cpp)
add_library(pch OBJECT pch.cpp)
add_library(pkcspad OBJECT pkcspad.cpp)
add_library(polynomi OBJECT polynomi.cpp)
add_library(pssr OBJECT pssr.cpp)
add_library(pubkey OBJECT pubkey.cpp)
add_library(queue OBJECT queue.cpp)
add_library(rabin OBJECT rabin.cpp)
add_library(randpool OBJECT randpool.cpp)
add_library(rc2 OBJECT rc2.cpp)
add_library(rc5 OBJECT rc5.cpp)
add_library(rc6 OBJECT rc6.cpp)
add_library(rdrand OBJECT rdrand.cpp)
add_library(rdtables OBJECT rdtables.cpp)
add_library(regtest OBJECT regtest.cpp)
add_library(rijndael OBJECT rijndael.cpp)
add_library(ripemd OBJECT ripemd.cpp)
add_library(rng OBJECT rng.cpp)
add_library(rsa OBJECT rsa.cpp)
add_library(rw OBJECT rw.cpp)
add_library(safer OBJECT safer.cpp)
add_library(salsa OBJECT salsa.cpp)
add_library(seal OBJECT seal.cpp)
add_library(seed OBJECT seed.cpp)
add_library(serpent OBJECT serpent.cpp)
add_library(sha OBJECT sha.cpp)
add_library(sha3 OBJECT sha3.cpp)
add_library(shacal2 OBJECT shacal2.cpp)
add_library(shark OBJECT shark.cpp)
add_library(sharkbox OBJECT sharkbox.cpp)
add_library(simple OBJECT simple.cpp)
add_library(skipjack OBJECT skipjack.cpp)
add_library(socketft OBJECT socketft.cpp)
add_library(sosemanuk OBJECT sosemanuk.cpp)
add_library(square OBJECT square.cpp)
add_library(squaretb OBJECT squaretb.cpp)
add_library(strciphr OBJECT strciphr.cpp)
add_library(tea OBJECT tea.cpp)
add_library(tftables OBJECT tftables.cpp)
add_library(tiger OBJECT tiger.cpp)
add_library(tigertab OBJECT tigertab.cpp)
add_library(trdlocal OBJECT trdlocal.cpp)
add_library(ttmac OBJECT ttmac.cpp)
add_library(twofish OBJECT twofish.cpp)
add_library(validat1 OBJECT validat1.cpp)
add_library(validat2 OBJECT validat2.cpp)
add_library(validat3 OBJECT validat3.cpp)
add_library(vmac OBJECT vmac.cpp)
add_library(wait OBJECT wait.cpp)
add_library(wake OBJECT wake.cpp)
add_library(whrlpool OBJECT whrlpool.cpp)
add_library(winpipes OBJECT winpipes.cpp)
add_library(xtr OBJECT xtr.cpp)
add_library(xtrcrypt OBJECT xtrcrypt.cpp)
add_library(zdeflate OBJECT zdeflate.cpp)
add_library(zinflate OBJECT zinflate.cpp)
add_library(zlib OBJECT zlib.cpp)
add_library(adhoc OBJECT adhoc.cpp)

add_library(cryptopp SHARED $<TARGET_OBJECTS:cryptlib> $<TARGET_OBJECTS:cpu> $<TARGET_OBJECTS:base32> $<TARGET_OBJECTS:files> 
    $<TARGET_OBJECTS:pluginmgr> $<TARGET_OBJECTS:dessp> $<TARGET_OBJECTS:seal> $<TARGET_OBJECTS:gzip> $<TARGET_OBJECTS:fips140>
    $<TARGET_OBJECTS:AESGCMEncryption> $<TARGET_OBJECTS:sha> $<TARGET_OBJECTS:dsa> $<TARGET_OBJECTS:tiger> $<TARGET_OBJECTS:tea>
    $<TARGET_OBJECTS:polynomi> $<TARGET_OBJECTS:eprecomp> $<TARGET_OBJECTS:hrtimer> $<TARGET_OBJECTS:nbtheory>
    $<TARGET_OBJECTS:fipstest> $<TARGET_OBJECTS:rc5> $<TARGET_OBJECTS:mars> $<TARGET_OBJECTS:queue> $<TARGET_OBJECTS:xtrcrypt>
    $<TARGET_OBJECTS:cmac> $<TARGET_OBJECTS:authenc> $<TARGET_OBJECTS:idea> $<TARGET_OBJECTS:squaretb> $<TARGET_OBJECTS:pkcspad>
    $<TARGET_OBJECTS:emsa2> $<TARGET_OBJECTS:network> $<TARGET_OBJECTS:eax> $<TARGET_OBJECTS:CryptoFactory> $<TARGET_OBJECTS:square>
    $<TARGET_OBJECTS:algparam> $<TARGET_OBJECTS:crc> $<TARGET_OBJECTS:des> $<TARGET_OBJECTS:mqueue> $<TARGET_OBJECTS:zlib>
    $<TARGET_OBJECTS:ida> $<TARGET_OBJECTS:camellia> $<TARGET_OBJECTS:strciphr> $<TARGET_OBJECTS:ecp> $<TARGET_OBJECTS:blowfish>
    $<TARGET_OBJECTS:marss> $<TARGET_OBJECTS:elgamal> $<TARGET_OBJECTS:adler32> $<TARGET_OBJECTS:wait>
    $<TARGET_OBJECTS:AESGCMDecryption> $<TARGET_OBJECTS:iterhash> $<TARGET_OBJECTS:twofish> $<TARGET_OBJECTS:wake>
    $<TARGET_OBJECTS:default> $<TARGET_OBJECTS:rc2> $<TARGET_OBJECTS:oaep> $<TARGET_OBJECTS:gf2n> $<TARGET_OBJECTS:zinflate>
    $<TARGET_OBJECTS:shark> $<TARGET_OBJECTS:md5> $<TARGET_OBJECTS:shacal2> $<TARGET_OBJECTS:ttmac>
    $<TARGET_OBJECTS:ECDHKeyExchange> $<TARGET_OBJECTS:eccrypto> $<TARGET_OBJECTS:arc4> $<TARGET_OBJECTS:ripemd>
    $<TARGET_OBJECTS:gcm> $<TARGET_OBJECTS:pubkey> $<TARGET_OBJECTS:trdlocal> $<TARGET_OBJECTS:salsa> $<TARGET_OBJECTS:luc>
    $<TARGET_OBJECTS:AESEncryption> $<TARGET_OBJECTS:tigertab> $<TARGET_OBJECTS:mqv> $<TARGET_OBJECTS:md2> $<TARGET_OBJECTS:ccm>
    $<TARGET_OBJECTS:dh> $<TARGET_OBJECTS:md4> $<TARGET_OBJECTS:whrlpool> $<TARGET_OBJECTS:asn> $<TARGET_OBJECTS:rng>
    $<TARGET_OBJECTS:cast> $<TARGET_OBJECTS:ZlibCompression> $<TARGET_OBJECTS:channels> $<TARGET_OBJECTS:pssr>
    $<TARGET_OBJECTS:misc> $<TARGET_OBJECTS:gf256> $<TARGET_OBJECTS:dh2> $<TARGET_OBJECTS:rc6>
    $<TARGET_OBJECTS:base64> $<TARGET_OBJECTS:filters> $<TARGET_OBJECTS:zdeflate> $<TARGET_OBJECTS:basecode>
    $<TARGET_OBJECTS:algebra> $<TARGET_OBJECTS:blumshub> $<TARGET_OBJECTS:ec2n> $<TARGET_OBJECTS:dll> $<TARGET_OBJECTS:gfpcrypt>
    $<TARGET_OBJECTS:esign> $<TARGET_OBJECTS:casts> $<TARGET_OBJECTS:rijndael> $<TARGET_OBJECTS:modes> $<TARGET_OBJECTS:sha3>
    $<TARGET_OBJECTS:panama> $<TARGET_OBJECTS:tftables> $<TARGET_OBJECTS:socketft> $<TARGET_OBJECTS:gost> $<TARGET_OBJECTS:rdtables>
    $<TARGET_OBJECTS:cbcmac> $<TARGET_OBJECTS:rsa> $<TARGET_OBJECTS:rdrand> $<TARGET_OBJECTS:rw> $<TARGET_OBJECTS:3way>
    $<TARGET_OBJECTS:gf2_32> $<TARGET_OBJECTS:rabin> $<TARGET_OBJECTS:bfinit> $<TARGET_OBJECTS:ZlibDecompression>
    $<TARGET_OBJECTS:sosemanuk> $<TARGET_OBJECTS:xtr> $<TARGET_OBJECTS:integer> $<TARGET_OBJECTS:seed> $<TARGET_OBJECTS:sharkbox>
    $<TARGET_OBJECTS:skipjack> $<TARGET_OBJECTS:osrng> $<TARGET_OBJECTS:hmac> $<TARGET_OBJECTS:vmac> $<TARGET_OBJECTS:hex>
    $<TARGET_OBJECTS:serpent> $<TARGET_OBJECTS:randpool> $<TARGET_OBJECTS:safer> $<TARGET_OBJECTS:AESDecryption> $<TARGET_OBJECTS:dllmain>)

target_link_libraries(cryptopp root_main)

add_executable(cryp test.cpp $<TARGET_OBJECTS:bench> $<TARGET_OBJECTS:bench2> $<TARGET_OBJECTS:validat1> $<TARGET_OBJECTS:validat2>
                             $<TARGET_OBJECTS:validat3> $<TARGET_OBJECTS:adhoc> $<TARGET_OBJECTS:datatest> $<TARGET_OBJECTS:regtest>
                             $<TARGET_OBJECTS:fipsalgt> $<TARGET_OBJECTS:dlltest>)
target_link_libraries(cryp cryptopp)
